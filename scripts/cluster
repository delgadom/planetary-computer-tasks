#!/bin/bash

set -e

if [[ "${CI}" ]]; then
    set -x
fi

function usage() {
    if [[ "${1}" ]]; then
        echo "${1}"
    fi

    echo -n \
        "Usage: $(basename "$0") [OPTIONS]
Script for managing dev cluster

Subcommands:
    setup
        Create and set up the dev cluster
    update
        Updates helm charts on the dev cluster
    argo-token
        Print the argo token as an export statement
    recreate
        Delete the dev cluster and recreate it
"
}

source scripts/env

SETUP=""
UPDATE=""
GET_ARGO_TOKEN=""
RECREATE=""
while [[ $# -gt 0 ]]; do case $1 in
    setup)
        SETUP="--setup"
        shift
        ;;
    update)
        UPDATE="--update"
        shift
        ;;
    argo-token)
        GET_ARGO_TOKEN="--argo-token"
        shift
        ;;
    recreate)
        RECREATE="--recreate"
        shift
        ;;
    --help)
        usage
        exit 0
        shift
        ;;
    *)
        usage "Unknown parameter passed: $1"
        exit 1
        ;;
    esac done

if [ -z "${SETUP}${UPDATE}${GET_ARGO_TOKEN}${RECREATE}" ]; then
    usage "No subcommand option specified"
    exit 1
fi

function create_cluster {
    if ! kind get clusters | grep -q ${KIND_CLUSTER_NAME}; then
        echo " -- CREATING KIND CLUSTER"
        KIND_EXPERIMENTAL_DOCKER_NETWORK=${DOCKER_NETWORK_NAME} kind \
            create cluster --name ${KIND_CLUSTER_NAME} \
            --config cluster/kind-config.yaml
    fi

    echo " -- REGISTERING LOCAL IMAGE REGISTRY"
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-registry-hosting
  namespace: kube-public
data:
  localRegistryHosting.v1: |
    host: "localhost:5001"
    help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
EOF

    if ! kubectl get namespace | grep -q argo; then
        echo " -- CREATING ARGO NAMESPACE"
        kubectl create ns argo
    fi

    helm repo add argo https://argoproj.github.io/argo-helm
    echo "Installing argo..."
    helm upgrade --install argo-workflows argo/argo-workflows \
        -n argo \
        --create-namespace \
        -f cluster/argo-values.yaml \
        --wait \
        --timeout 2m0s

}

function update_registry() {
    echo "Adding pctasks-server to local registry..."
    docker tag pctasks-server localhost:5001/pctasks-server &&
        docker push localhost:5001/pctasks-server

    echo "Adding pctasks-run to local registry..."
    docker tag pctasks-run localhost:5001/pctasks-run &&
        docker push localhost:5001/pctasks-run

    echo "Adding pctasks-ingest to local registry..."
    docker tag pctasks-ingest localhost:5001/pctasks-ingest &&
        docker push localhost:5001/pctasks-ingest

    echo "Adding pctasks-task-base to local registry..."
    docker tag pctasks-task-base localhost:5001/pctasks-task-base &&
        docker push localhost:5001/pctasks-task-base
}

function update_cluster() {

    echo "Installing dev chart..."
    helm upgrade --install \
        pctasks-dev \
        cluster/pctasks-dev \
        -n pc \
        -f cluster/dev-values.yaml \
        --create-namespace

    # Get ARGO_TOKEN
    ARGO_TOKEN="Bearer $(kubectl get secret -n pc pctasks-sa-token -o jsonpath='{.data.token}' | base64 --decode)"

    echo "Installing pctasks-server helm chart..."
    # Set pctasks.deploy.podAnnotations.updated to force a new deployment
    helm upgrade --install \
        pctasks-server \
        deployment/helm/pctasks-server/ \
        -n pc \
        -f cluster/dev-values.yaml \
        --create-namespace \
        --set pctasks.server.deploy.podAnnotations.updated="$(date)" \
        --set pctasks.run.argo.token="${ARGO_TOKEN}"

    echo "Installing ingress-nginx..."
    # TODO: Move to helm chart
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/kind/deploy.yaml
    kubectl wait --namespace ingress-nginx \
        --for=condition=ready pod \
        --selector=app.kubernetes.io/component=controller \
        --timeout=90s
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${SETUP}" ]; then
        create_cluster;
        update_registry;
        update_cluster;
    fi

    if [ "${UPDATE}" ]; then
        update_registry;
        update_cluster;
    fi

    if [ "${GET_ARGO_TOKEN}" ]; then
        echo "Use the following token for connecting to argo..."
        echo
        ARGO_TOKEN=$(echo_argo_token)
        echo "export ARGO_TOKEN=\"${ARGO_TOKEN}\""
        echo
    fi

    if [ "${RECREATE}" ]; then
        echo " -- RECREATING KIND CLUSTER"
        kind delete cluster --name ${KIND_CLUSTER_NAME}
        create_cluster;
        update_cluster;
    fi

fi
